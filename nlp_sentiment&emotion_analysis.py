# -*- coding: utf-8 -*-
"""NLP_sentiment&emotion analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YehjtPZnSzNR4k2F9zhGI_sYTU8d7lEp
"""

# Fix Colab Error
!pip install --upgrade google-cloud-storage

# TweetNlp will be the tool for converting scoring into emojis : )
!pip install tweetnlp

! pip list | grep tweetnlp

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/cardiffnlp/tweetnlp
# %cd tweetnlp
!pip install . -U

!pip install --upgrade huggingface_hub
# upgrade huggingface_hub to the latest version, which should include the missing function

import tweetnlp

model_topic = tweetnlp.load_model('topic_classification')  # Or `model = tweetnlp.TopicClassification()  # Or `model.predict`

model_topic_singlelable = tweetnlp.load_model('topic_classification', multi_label=False)

model_emoji = tweetnlp.load_model('emoji')

model_ner = tweetnlp.load_model('ner')  # Or `model = tweetnlp.NER()`

from transformers import pipeline
import pandas as pd
import os

movie_with_reviews = pd.read_csv("/content/cleaned_movie_reviews_20240914_021524.csv")
movie_with_reviews.head()

# Using the correct DataFrame name: movie_with_reviews
grouped_df = movie_with_reviews.groupby('Cleaned Location').agg({
    'Movie': 'first',
    'latitude': 'first',
    'longitude': 'first',
    'review_text': 'first',
    'place_name': 'first',
    'rating': 'mean',
    'label_sadness': 'mean',
    'label_joy': 'mean',
    'label_love': 'mean',
    'label_anger': 'mean',
    'label_fear': 'mean'
}).reset_index()

# Rename columns to indicate averages
grouped_df = grouped_df.rename(columns={
    'rating': 'avg_rating',
    'label_sadness': 'avg_sadness',
    'label_joy': 'avg_joy',
    'label_love': 'avg_love',
    'label_anger': 'avg_anger',
    'label_fear': 'avg_fear'
})

grouped_df.head()

prediction_topic = model_topic.topic(grouped_df['review_text'][1], return_probability=True)
prediction_topic_single = model_topic_singlelable.topic(grouped_df['review_text'][1], return_probability=True)
prediction_emoji = model_emoji.emoji(grouped_df['review_text'][1], return_probability=True)
prediction_ner = model_ner.ner(grouped_df['review_text'][1], return_probability=True)

grouped_df['topic_label'],grouped_df['single_label'],grouped_df['emoji'],grouped_df['Name Recognition'] = None, None,None, None

for i in range(len(grouped_df)):
    try:
        prediction_topic = model_topic.topic(grouped_df['review_text'][i], return_probability=True)
        prediction_topic_single = model_topic_singlelable.topic(grouped_df['review_text'][i], return_probability=True)
        prediction_emoji = model_emoji.emoji(grouped_df['review_text'][i], return_probability=True)
        prediction_ner = model_ner.ner(grouped_df['place_name'][i], return_probability=True)

        print(f"Index: {i}")
        print(f"Place name: {grouped_df['place_name'][i]}")
        print(f"NER prediction: {prediction_ner}")

        grouped_df.at[i, 'topic_label'] = prediction_topic['label']
        grouped_df.at[i, 'emoji'] = prediction_emoji['label']
        grouped_df.at[i, 'single_label'] = prediction_topic_single['label']

        if isinstance(prediction_ner, dict) and 'label' in prediction_ner:
            grouped_df.at[i, 'Name Recognition'] = prediction_ner['label']
        elif isinstance(prediction_ner, list) and len(prediction_ner) > 0 and 'label' in prediction_ner[0]:
            grouped_df.at[i, 'Name Recognition'] = prediction_ner[0]['label']
        else:
            grouped_df.at[i, 'Name Recognition'] = 'Unknown'

    except Exception as e:
        print(f"Error at index {i}: {str(e)}")
        grouped_df = grouped_df.drop(i)

grouped_df.head()

grouped_df.to_excel("Emoji_mapping.xlsx",index=True)

grouped_df['single_label'].value_counts()